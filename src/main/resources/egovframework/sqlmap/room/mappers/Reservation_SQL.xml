<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="egovframework.room.service.impl.ReservationMapper">

    <resultMap id="reservationMap" type="reservationVO">
        <id property="reservationIdx" column="reservation_idx" />
        <result property="roomIdx" column="room_idx" />
        <result property="userIdx" column="user_idx" />
        <result property="title" column="title" />
        <result property="attendees" column="attendees" />
        <result property="startDatetime" column="start_datetime" />
    	<result property="endDatetime" column="end_datetime" />
        <result property="content" column="content" />
        <result property="isRecurring" column="is_recurring" />
        <result property="recurringIdx" column="recurring_idx" />
        <!-- JOIN 된 필드 -->
        <result property="roomName" column="room_name" />
        <result property="userName" column="user_name" />
    </resultMap>

    <resultMap id="recurringReservationMap" type="recurringReservationVO">
        <id property="recurringIdx" column="recurring_idx" />
        <result property="recurrenceType" column="recurrence_type" />
        <result property="daysOfWeek" column="days_of_week" />
        <result property="startDate" column="start_date" />
        <result property="endDate" column="end_date" />
    </resultMap>

    <!-- 단일 예약 등록 -->
    <insert id="insertSingleReservation" parameterType="reservationVO" useGeneratedKeys="true" keyProperty="reservationIdx">
        INSERT INTO reservations (
	        room_idx,
	        user_idx,
	        title,
	        attendees,
	        start_datetime,
	        end_datetime,
	        content
	    ) VALUES (
	        #{roomIdx},
	        #{userIdx},
	        #{title},
	        #{attendees},
	        #{startDatetime, jdbcType=TIMESTAMP},
	        #{endDatetime, jdbcType=TIMESTAMP},
	        #{content}
	    )
    </insert>

    <!-- 반복 예약 규칙 등록 -->
    <insert id="insertRecurringReservation" parameterType="recurringReservationVO" useGeneratedKeys="true" keyProperty="recurringIdx">
        INSERT INTO recurring_reservations (
            recurrence_type, days_of_week, start_date, end_date
        ) VALUES (
            #{recurrenceType}, #{daysOfWeek}, #{startDate}, #{endDate}
        )
    </insert>

    <!-- 반복 예약 상세 등록 -->
    <insert id="insertRecurringReservationDetail" parameterType="reservationVO" useGeneratedKeys="true" keyProperty="reservationIdx">
        INSERT INTO reservations (
            room_idx, user_idx, title, attendees, date, start_time, end_time, content, is_recurring, recurring_idx
        ) VALUES (
            #{roomIdx}, #{userIdx}, #{title}, #{attendees}, #{date}, #{startTime}, #{endTime}, #{content}, TRUE, #{recurringIdx}
        )
    </insert>
    
    <!-- 전체 예약 목록 조회 (조인 포함) -->
    <select id="selectReservationList" parameterType="reservationVO" resultMap="reservationMap">
        SELECT
            r.reservation_idx, r.room_idx, r.user_idx, r.title, r.attendees, r.start_datetime, r.end_datetime, r.content, r.is_recurring, r.recurring_idx,
            ro.name AS room_name,
            u.name AS user_name
        FROM reservations r
        LEFT JOIN rooms ro ON r.room_idx = ro.room_idx
        LEFT JOIN users u ON r.user_idx = u.user_idx
        WHERE 1=1
        ORDER BY r.start_datetime DESC
    </select>
    
    <!-- 내 예약 목록 조회 (조인 포함) -->
    <select id="selectMyReservationList" parameterType="reservationVO" resultMap="reservationMap">
        SELECT
            r.reservation_idx, r.room_idx, r.user_idx, r.title, r.attendees, r.start_datetime, r.end_datetime, r.content, r.is_recurring, r.recurring_idx,
            ro.name AS room_name,
            u.name AS user_name
        FROM reservations r
        LEFT JOIN rooms ro ON r.room_idx = ro.room_idx
        LEFT JOIN users u ON r.user_idx = u.user_idx
        WHERE 1=1
        AND u.user_idx = #{userIdx}
        ORDER BY r.start_datetime DESC
        LIMIT #{firstIndex}, #{recordCountPerPage}
    </select>
    
    <select id="selectMyReservationListTotCnt" parameterType="reservationVO" resultType="int">
        SELECT COUNT(*) FROM reservations
        WHERE user_idx = #{userIdx}
    </select>
    
    <!-- 중복 예약 확인 -->
    <!-- &lt is '<'   &gt is '>' -->
    <select id="selectCountOverlappingReservations" parameterType="reservationVO" resultType="int">
	    SELECT COUNT(*)
		FROM reservations
		WHERE room_idx = #{roomIdx}
		AND (
		    (start_datetime &lt; #{endDatetime})
		    AND
		    (end_datetime &gt; #{startDatetime})
		)
		<if test="reservationIdx > 0">
	        AND reservation_idx != #{reservationIdx}
	    </if>
	</select>
	
	<!-- 예약 취소 -->
	<delete id="deleteReservation" parameterType="reservationVO">
		DELETE FROM reservations
		WHERE reservation_idx = #{reservationIdx}
	</delete>
	
	<!-- 예약 상세 조회 -->
	<select id="selectReservation" parameterType="reservationVO" resultMap="reservationMap">
	    SELECT
	        r.reservation_idx,
	        r.room_idx,
	        ro.name AS room_name,
	        r.user_idx,
	        u.name AS user_name,
	        r.title,
	        r.attendees,
	        r.start_datetime,
	        r.end_datetime,
	        r.content,
	        r.is_recurring,
	        r.recurring_idx        
	    FROM reservations r
	    LEFT JOIN rooms ro ON r.room_idx = ro.room_idx
	    LEFT JOIN users u ON r.user_idx = u.user_idx
	    WHERE r.reservation_idx = #{reservationIdx}
	</select>
	
	<update id="updateReservation" parameterType="reservationVO">
	    UPDATE reservations
	    SET
	        room_idx = #{roomIdx},
	        title = #{title},
	        attendees = #{attendees},
	        start_datetime = #{startDatetime},
	        end_datetime = #{endDatetime},
	        content = #{content}
	    WHERE
	        reservation_idx = #{reservationIdx}
	</update>
	
	<select id="countTotalReservationsByDate" parameterType="string" resultType="int">
	    SELECT COUNT(*)
	    FROM reservations
	    WHERE substr(start_datetime, 1, 10) = #{date}
	</select>
	
	<select id="countMyReservationsByDate" parameterType="map" resultType="int">
	    SELECT COUNT(*)
	    FROM reservations
	    WHERE user_idx = #{userIdx} AND substr(start_datetime, 1, 10) = #{date}
	</select>
	
	<select id="selectReservationListByDate" parameterType="reservationVO" resultMap="reservationMap">
        SELECT
            r.reservation_idx,
            r.room_idx,
            r.user_idx,
            r.title,
            r.attendees,
            r.start_datetime,
            r.end_datetime,
            r.content,
            r.is_recurring,
            r.recurring_idx,
            ro.name AS room_name,
            u.name AS user_name
        FROM
            reservations r
        JOIN
            rooms ro ON r.room_idx = ro.room_idx
        JOIN
            users u ON r.user_idx = u.user_idx
        WHERE
            SUBSTR(r.start_datetime, 1, 10) = #{searchKeyword}
        ORDER BY
            r.start_datetime ASC
        LIMIT #{firstIndex}, #{recordCountPerPage}
    </select>
</mapper>